@implements IDialogContentComponent<NewsPostDetailsModel>
@inject NewsClient newsClient
@inject IFileUrlProvider fileUrlProvider
@inject IToastService toastService
@inject DataSource dataSource

<EditForm Model="@Content" OnValidSubmit="SaveAsync">
<FluentDialogHeader ShowDismiss="false">
    <FluentStack VerticalAlignment="VerticalAlignment.Center">
        <FluentIcon Value="@(new Icons.Regular.Size24.News())" />
        <FluentLabel Typo="Typography.PaneHeader">
            @Dialog.Instance.Parameters.Title
        </FluentLabel>
    </FluentStack>
</FluentDialogHeader>

<FluentDialogBody>
    <FluentTextField
       Label="Title:"
       TextFieldType="TextFieldType.Text"
       Required
       Placeholder="Enter news title"
       @bind-Value="@Content.Title" />
    
    <FluentDatePicker
       Label="Publish date:"
       Required
       @bind-Value="@Content.PublishDate" />
    
    <FluentTextArea
        Label="Text:"
        Required
        @bind-Value="@Content.Body"
        Rows="10"
        style="width:100%;" />
</FluentDialogBody>

<FluentDialogFooter>
    <FluentButton
        Appearance="Appearance.Neutral"
        IconStart="@(new Icons.Regular.Size20.ArrowUndo())"
        OnClick="@CancelAsync">
        @Dialog.Instance.Parameters.SecondaryAction
    </FluentButton>
    <FluentButton
        Appearance="Appearance.Accent"
        IconStart="@(new Icons.Regular.Size20.Checkmark())"
        Loading="@saving"
        Type="ButtonType.Submit">
        @Dialog.Instance.Parameters.PrimaryAction
    </FluentButton>
</FluentDialogFooter>
</EditForm>

@code {
    [CascadingParameter]
    public FluentDialog Dialog { get; set; } = default!;
    [Parameter]
    public NewsPostDetailsModel Content { get; set; } = default!;
    private bool saving = false;

    private async Task SaveAsync()
    {
        saving = true;
        var response = await dataSource.RunAction(async () =>
        {
            var @params = new NewsPostCreateParams
            {
                Title = Content.Title!,
                PublishDate = Content.PublishDate!.Value,
                Body = Content.Body!
            };
            if (Content.Id is null)
            {
                return await newsClient.CreateNewsPostAsync(@params);
            }

            await newsClient.UpdateNewsPostAsync(Content.Id.Value, @params);

            return Content.Id.Value;
        });
        if (response.IsSuccessful)
        {
            await Dialog.CloseAsync(response.Result);
        }
        toastService.ShowErrors(response.Errors);
        saving = false;
    }

    private async Task CancelAsync()
    {
        await Dialog.CancelAsync();
    }
}
