@implements IDialogContentComponent<int>
@inject TeamsClient teamsClient
@inject CoachesClient coachesClient
@inject IFileUrlProvider fileUrlProvider
@inject IToastService toastService
@inject DataSource dataSource

<FluentDialogHeader ShowDismiss="false">
    <FluentStack VerticalAlignment="VerticalAlignment.Center">
        <FluentIcon Value="@(new Icons.Regular.Size24.PersonSwap())" />
        <FluentLabel Typo="Typography.PaneHeader">
            Team coaches
        </FluentLabel>
    </FluentStack>
</FluentDialogHeader>

<FluentDialogBody>
        <FluentSelect
            Label="Select team coaches"
            Multiple="true"
            TOption="Option<string>"
            Items="@coachOptions"
            OptionText="@(i => i.Text)"
            OptionValue="@(i => i.Value)"
            OptionSelected="@(i => i.Selected)"
            OptionDisabled="@(i => i.Disabled)"
            @bind-SelectedOptions="@selectedOptions"
            Height="230px"
            Style="box-shadow: var(--elevation-shadow-card-active);"/>
</FluentDialogBody>

<FluentDialogFooter>
    <FluentButton
        Appearance="Appearance.Neutral"
        IconStart="@(new Icons.Regular.Size20.ArrowUndo())"
        OnClick="@CancelAsync">
        Cancel
    </FluentButton>
    <FluentButton
        Appearance="Appearance.Accent"
        IconStart="@(new Icons.Regular.Size20.Checkmark())"
        Loading="@saving"
        OnClick="@SaveAsync">
        Save
    </FluentButton>
</FluentDialogFooter>

@code {
    [CascadingParameter]
    public FluentDialog Dialog { get; set; } = default!;
    [Parameter]
    public int Content { get; set; } = default!;
    private int TeamId => Content;
    private bool saving = false;
    private List<Option<string>> coachOptions = default!;
    private IEnumerable<Option<string>> selectedOptions = default!;

    protected async override Task OnInitializedAsync()
    {
        var teamCoachOptions = await GetTeamCoachOptions();
        var freeCoachOptions = await GetFreeCoachOptions();

        coachOptions = teamCoachOptions
            .Concat(freeCoachOptions)
            .OrderBy(o => o.Text)
            .ToList();
        selectedOptions = teamCoachOptions;
    }

    private async Task<List<Option<string>>> GetTeamCoachOptions()
    {
        var teamCoaches = await teamsClient.GetTeamCoachesAsync(TeamId);
        return teamCoaches
            .Select(c => new Option<string>
            {
                Value = c.Id.ToString(),
                Text = c.GetFullName(),
                Icon = (Icon.FromImageUrl(fileUrlProvider.GetFileUrl(c.PhotoFileName ?? DefaultImages.NoPhoto)), Color.Neutral, "start"),
                Selected = true
            })
            .ToList();
    }

    private async Task<List<Option<string>>> GetFreeCoachOptions()
    {
        var freeCoaches = await coachesClient.GetCoachesAsync(notInTeam: true);
        return freeCoaches
            .Select(c => new Option<string>
            {
                Value = c.Id.ToString(),
                Text = c.GetFullName(),
                Icon = (Icon.FromImageUrl(fileUrlProvider.GetFileUrl(c.PhotoFileName ?? DefaultImages.NoPhoto)), Color.Neutral, "start"),
                Selected = false
            })
            .ToList();
    }

    private async Task SaveAsync()
    {
        saving = true;
        var response = await dataSource.RunAction(async () =>
        {
            var coachIds = selectedOptions.Select(o => int.Parse(o.Value!)).ToArray();

            await teamsClient.UpdateTeamCoachesAsync(TeamId, coachIds);
        });
        if (response.IsSuccessful)
        {
            await Dialog.CloseAsync();
        }
        toastService.ShowErrors(response.Errors);
        saving = false;
    }

    private async Task CancelAsync()
    {
        await Dialog.CancelAsync();
    }
}