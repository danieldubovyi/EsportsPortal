@implements IDialogContentComponent<int>
@inject TournamentsClient tournamentsClient
@inject TeamsClient teamsClient
@inject IFileUrlProvider fileUrlProvider
@inject IToastService toastService
@inject DataSource dataSource

<FluentDialogHeader ShowDismiss="false">
    <FluentStack VerticalAlignment="VerticalAlignment.Center">
        <FluentIcon Value="@(new Icons.Regular.Size24.PeopleTeam())" />
        <FluentLabel Typo="Typography.PaneHeader">
            Tournament teams
        </FluentLabel>
    </FluentStack>
</FluentDialogHeader>

<FluentDialogBody>
        <FluentSelect
            Label="Select tournament teams"
            Multiple="true"
            TOption="Option<string>"
            Items="@teamOptions"
            OptionText="@(i => i.Text)"
            OptionValue="@(i => i.Value)"
            OptionSelected="@(i => i.Selected)"
            OptionDisabled="@(i => i.Disabled)"
            @bind-SelectedOptions="@selectedOptions"
            Height="230px"
            Style="box-shadow: var(--elevation-shadow-card-active);"/>
</FluentDialogBody>

<FluentDialogFooter>
    <FluentButton
        Appearance="Appearance.Neutral"
        IconStart="@(new Icons.Regular.Size20.ArrowUndo())"
        OnClick="@CancelAsync">
        Cancel
    </FluentButton>
    <FluentButton
        Appearance="Appearance.Accent"
        IconStart="@(new Icons.Regular.Size20.Checkmark())"
        Loading="@saving"
        OnClick="@SaveAsync">
        Save
    </FluentButton>
</FluentDialogFooter>

@code {
    [CascadingParameter]
    public FluentDialog Dialog { get; set; } = default!;
    [Parameter]
    public int Content { get; set; } = default!;
    private int TournamentId => Content;
    private bool saving = false;
    private List<Option<string>> teamOptions = default!;
    private IEnumerable<Option<string>> selectedOptions = default!;

    protected async override Task OnInitializedAsync()
    {
        teamOptions = await GetTeamsOptions();
    }

    private async Task<List<Option<string>>> GetTeamsOptions()
    {
        var tournamentTeamIds = (await tournamentsClient.GetTournamentTeamsAsync(TournamentId))
            .Select(t => t.Id).ToArray();
        var teams = await teamsClient.GetTeamsAsync();
        return teams
            .Select(t => new Option<string>
            {
                Value = t.Id.ToString(),
                Text = t.Name,
                Icon = (Icon.FromImageUrl(fileUrlProvider.GetFileUrl(t.LogoFileName ?? DefaultImages.NoLogo)), Color.Neutral, "start"),
                Selected = tournamentTeamIds.Contains(t.Id)
            })
            .ToList();
    }

    private async Task SaveAsync()
    {
        saving = true;
        var response = await dataSource.RunAction(async () =>
        {
            var teamIds = selectedOptions.Select(o => int.Parse(o.Value!)).ToArray();

            await tournamentsClient.UpdateTournamentTeamsAsync(TournamentId, teamIds);
        });
        if (response.IsSuccessful)
        {
            await Dialog.CloseAsync();
        }
        toastService.ShowErrors(response.Errors);
        saving = false;
    }

    private async Task CancelAsync()
    {
        await Dialog.CancelAsync();
    }
}
